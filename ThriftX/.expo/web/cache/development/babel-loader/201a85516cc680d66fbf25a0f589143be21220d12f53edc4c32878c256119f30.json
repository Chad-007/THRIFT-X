{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport LinearGradient from \"react-native-linear-gradient\";\nimport { api } from \"../services/api\";\nimport { COLORS } from \"../utils/constants\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar ChatScreen = function ChatScreen(_ref) {\n  var route = _ref.route;\n  var sellerId = route.params.sellerId;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    messages = _useState2[0],\n    setMessages = _useState2[1];\n  var _useState3 = useState(\"\"),\n    _useState4 = _slicedToArray(_useState3, 2),\n    message = _useState4[0],\n    setMessage = _useState4[1];\n  useEffect(function () {\n    fetchMessages();\n  }, []);\n  var fetchMessages = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        var response = yield api.get(`/messages/${sellerId}`);\n        setMessages(response.data);\n      } catch (error) {\n        console.error(\"Error fetching messages:\", error);\n      }\n    });\n    return function fetchMessages() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var sendMessage = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      if (!message.trim()) return;\n      try {\n        yield api.post(\"/messages\", {\n          sellerId: sellerId,\n          content: message\n        });\n        setMessage(\"\");\n        fetchMessages();\n      } catch (error) {\n        console.error(\"Error sending message:\", error);\n      }\n    });\n    return function sendMessage() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  return _jsxs(LinearGradient, {\n    colors: [COLORS.primary, COLORS.secondary],\n    style: styles.container,\n    children: [_jsx(FlatList, {\n      data: messages,\n      keyExtractor: function keyExtractor(item) {\n        return item.id;\n      },\n      renderItem: function renderItem(_ref4) {\n        var item = _ref4.item;\n        return _jsx(View, {\n          style: [styles.message, item.isSent ? styles.sentMessage : styles.receivedMessage],\n          children: _jsx(Text, {\n            style: styles.messageText,\n            children: item.content\n          })\n        });\n      },\n      contentContainerStyle: styles.list\n    }), _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"Type a message...\",\n        value: message,\n        onChangeText: setMessage\n      }), _jsx(TouchableOpacity, {\n        style: styles.sendButton,\n        onPress: sendMessage,\n        children: _jsx(Text, {\n          style: styles.sendButtonText,\n          children: \"Send\"\n        })\n      })]\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  list: {\n    padding: 16,\n    paddingBottom: 80\n  },\n  message: {\n    padding: 12,\n    borderRadius: 8,\n    marginBottom: 8,\n    maxWidth: \"80%\"\n  },\n  sentMessage: {\n    backgroundColor: COLORS.accent,\n    alignSelf: \"flex-end\"\n  },\n  receivedMessage: {\n    backgroundColor: \"#fff\",\n    alignSelf: \"flex-start\"\n  },\n  messageText: {\n    fontSize: 16,\n    color: \"#333\"\n  },\n  inputContainer: {\n    flexDirection: \"row\",\n    padding: 16,\n    backgroundColor: \"#fff\",\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\"\n  },\n  input: {\n    flex: 1,\n    borderRadius: 8,\n    padding: 12,\n    fontSize: 16,\n    backgroundColor: \"#f0f0f0\"\n  },\n  sendButton: {\n    backgroundColor: COLORS.accent,\n    padding: 12,\n    borderRadius: 8,\n    marginLeft: 10,\n    justifyContent: \"center\"\n  },\n  sendButtonText: {\n    color: \"#fff\",\n    fontSize: 16\n  }\n});\nexport default ChatScreen;","map":{"version":3,"names":["React","useState","useEffect","StyleSheet","View","Text","TextInput","FlatList","TouchableOpacity","LinearGradient","api","COLORS","jsx","_jsx","jsxs","_jsxs","ChatScreen","_ref","route","sellerId","params","_useState","_useState2","_slicedToArray","messages","setMessages","_useState3","_useState4","message","setMessage","fetchMessages","_ref2","_asyncToGenerator","response","get","data","error","console","apply","arguments","sendMessage","_ref3","trim","post","content","colors","primary","secondary","style","styles","container","children","keyExtractor","item","id","renderItem","_ref4","isSent","sentMessage","receivedMessage","messageText","contentContainerStyle","list","inputContainer","input","placeholder","value","onChangeText","sendButton","onPress","sendButtonText","create","flex","padding","paddingBottom","borderRadius","marginBottom","maxWidth","backgroundColor","accent","alignSelf","fontSize","color","flexDirection","position","bottom","width","marginLeft","justifyContent"],"sources":["/home/alan/Desktop/ThriftX/screens/ChatScreen.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  View,\n  Text,\n  TextInput,\n  FlatList,\n  TouchableOpacity,\n} from \"react-native\";\nimport LinearGradient from \"react-native-linear-gradient\";\nimport { api } from \"../services/api\";\nimport { COLORS } from \"../utils/constants\";\n\nconst ChatScreen = ({ route }) => {\n  const { sellerId } = route.params;\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n\n  useEffect(() => {\n    fetchMessages();\n  }, []);\n\n  const fetchMessages = async () => {\n    try {\n      const response = await api.get(`/messages/${sellerId}`);\n      setMessages(response.data);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!message.trim()) return;\n    try {\n      await api.post(\"/messages\", { sellerId, content: message });\n      setMessage(\"\");\n      fetchMessages();\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n\n  return (\n    <LinearGradient\n      colors={[COLORS.primary, COLORS.secondary]}\n      style={styles.container}\n    >\n      <FlatList\n        data={messages}\n        keyExtractor={(item) => item.id}\n        renderItem={({ item }) => (\n          <View\n            style={[\n              styles.message,\n              item.isSent ? styles.sentMessage : styles.receivedMessage,\n            ]}\n          >\n            <Text style={styles.messageText}>{item.content}</Text>\n          </View>\n        )}\n        contentContainerStyle={styles.list}\n      />\n      <View style={styles.inputContainer}>\n        <TextInput\n          style={styles.input}\n          placeholder=\"Type a message...\"\n          value={message}\n          onChangeText={setMessage}\n        />\n        <TouchableOpacity style={styles.sendButton} onPress={sendMessage}>\n          <Text style={styles.sendButtonText}>Send</Text>\n        </TouchableOpacity>\n      </View>\n    </LinearGradient>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1 },\n  list: { padding: 16, paddingBottom: 80 },\n  message: { padding: 12, borderRadius: 8, marginBottom: 8, maxWidth: \"80%\" },\n  sentMessage: { backgroundColor: COLORS.accent, alignSelf: \"flex-end\" },\n  receivedMessage: { backgroundColor: \"#fff\", alignSelf: \"flex-start\" },\n  messageText: { fontSize: 16, color: \"#333\" },\n  inputContainer: {\n    flexDirection: \"row\",\n    padding: 16,\n    backgroundColor: \"#fff\",\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n  },\n  input: {\n    flex: 1,\n    borderRadius: 8,\n    padding: 12,\n    fontSize: 16,\n    backgroundColor: \"#f0f0f0\",\n  },\n  sendButton: {\n    backgroundColor: COLORS.accent,\n    padding: 12,\n    borderRadius: 8,\n    marginLeft: 10,\n    justifyContent: \"center\",\n  },\n  sendButtonText: { color: \"#fff\", fontSize: 16 },\n});\n\nexport default ChatScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}